/******************************************************************
 ManageDriveCaterpillar - библиотека управления гусеницами
 MDC_V001 - название проекта
 Libraries   :
 Author      :  0softic0@gmail.com
 Description :  Управление с помщью Arduino скоростью и 
                направлением. Основное назначение - управление 
                сигналами на драйвер бесколлекторного двигателя
******************************************************************/


#ifndef MDC_V001_h
#define MDC_V001_h

#include "Arduino.h"
/*================================================================
* Класс одного борта - гусеницы
==================================================================*/
class ManageDriveCaterpillar{
  public:
    /*************************************************************************
    *  ManageDriveCaterpillar - конструктор
    * _PIN_NAPR - контакт к по которому отдается команда направления движения
    * _PIN_VELOCITY - контакт задающий скорость
    **************************************************************************/
    ManageDriveCaterpillar(int _PIN_NAPR_, int _PIN_VELOCITY_);
    /*************************************************************************
    * Inic - инициализация пинов управления. Настраиваем их на ВЫХОД.
    **************************************************************************/
    void Inic ();
    /*************************************************************************
    * SetInputReadVelocity - установка требуемой скорости
    * _inputReadVelocity - целочисленное значение скорости
    **************************************************************************/
    void SetInputReadVelocity(int _inputReadVelocity);
    /*************************************************************************
    * VelocityCaterpillar - процедура контроля скорости движения и ее 
    *   изменения с учетом текущего и требуемого состояний. При смене 
    *   состояний - производится замедление. Разгон и торможение - при 
    *   сохранении состояния, но изменении требуемой скоростию (процедура не 
    *   меняет направление движения
    * _readVelocity - требуемая скорость
    **************************************************************************/
    void VelocityCaterpillar(int _readVelocity);
    /*************************************************************************
    * DriveCaterpillar - подготавливаем данные с учетом текущего состояния.
    *   Состояние - это направление движения: вперед, назад, стоим. 
    **************************************************************************/
    void DriveCaterpillar();
    /*************************************************************************
    * Run_Run - процедура отдающее непосредственно 
    *   продготовленную команду с ранее подготовленными данными
    **************************************************************************/
    void Run_Run();
  private:
    int PIN_NAPR;                 // пин направления
    int PIN_VELOCITY;             // пин скорости
    int Velocity=20;              // последнее значение скорости
    int readVelocity=20;          // новое значение скорости
    int inputReadVelocity;
    unsigned long int lastTime=0; // последний раз производили изменение
    unsigned long int realTime=0; // текущее время
    int incrVelocity=0;          // задержка по времени на инкрементацию скорости
    int decrVelocity=0;           // ----------------------декрементацию ---------
    int  realSost=0;              // 0 - стоим, 1 - разгоняемся, 2 - тормозим, 3 - постоянная скорость
    int lastSost=0;               // последнее состояние 
    int varSTOP=40;               // минимальное значение которое определяется как останов
    int varMinVelocity=40;        // минимальное значение когда начинается движение гусеницы
    int readNapr=0;               // направление движения -1 - назад, 0 - стоим, 1 - вперед
    int realNapr=0;               // текущее ----------------------------------------------
  
};

#endif
